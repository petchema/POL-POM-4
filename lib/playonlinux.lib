#!/bin/bash

# Copyright (C) 2007-2010 PlayOnLinux Team
# Copyright (C) 2007-2011 PÃ¢ris Quentin

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 551 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. 

# playonlinux.lib
# ---------------
#
# This lib contains PlayOnLinux's internal functions. Scriptors usually don't need to use theses functions


#################################
##### PlayOnLinux functions #####
#################################

construire_repertoire_personnel ()
{
	# Build PlayOnLinux's home directories
	# Usage : construire_repertoire_personnel
	# Warning ! This function is essential. setupwindow.lib will not work if theses directories are not built
	
	mkdir -p "$REPERTOIRE/wineprefix/default/"
	mkdir -p "$REPERTOIRE/shortcuts/"
	mkdir -p "$REPERTOIRE/configurations/options/"
	mkdir -p "$REPERTOIRE/configurations/icones/"
	mkdir -p "$REPERTOIRE/configurations/manuals/"
	mkdir -p "$REPERTOIRE/tmp"
	mkdir -p "$REPERTOIRE/logs"
	mkdir -p "$REPERTOIRE/scripts"
	mkdir -p "$REPERTOIRE/ressources"
	mkdir -p "$REPERTOIRE/icones/full_size"
	mkdir -p "$REPERTOIRE/icones/32"
	if [ "$POL_OS" == "Linux" ]
	then
		mkdir -p "$REPERTOIRE/wine/linux-x86"
		mkdir -p "$REPERTOIRE/wine/linux-amd64"
	else
		mkdir -p "$REPERTOIRE/wine/darwin-x86"
		mkdir -p "$REPERTOIRE/wine/darwin-amd64"
	fi
	mkdir -p "$REPERTOIRE/wine/gecko"
	mkdir -p "$REPERTOIRE/plugins"
	mkdir -p "$REPERTOIRE/configurations/guis"
	mkdir -p "$REPERTOIRE/configurations/configurators"
	mkdir -p "$REPERTOIRE/configurations/setups"
	touch "$POL_USER_ROOT/configurations/custom"
	touch "$POL_USER_ROOT/playonlinux.cfg"
	touch "$REPERTOIRE/configurations/listes/gecko.lst"
	
}

clean_tmp ()
{
	# Clean PlayOnLinux tmp directory
	# Usage: clean_tmp
	# Be careful, it might be very dangerous !
	# Cleanup is done in background
	mv "$REPERTOIRE/tmp" "$REPERTOIRE/tmp$$"
	mkdir -p "$REPERTOIRE/tmp"
	rm -rf "$REPERTOIRE/tmp$$" 2> /dev/null &
}

##################################
##### Config files functions #####
##################################

POL_Config_Write ()
{
	# Add an entry to PlayOnLinux's config file
	# If the entry already exists, it will replace it
	# Usage : POL_Config_Write [KEY] [VALUE]
	
	cat "$POL_USER_ROOT/playonlinux.cfg" 2> /dev/null | grep -v "^$1" > "$POL_USER_ROOT/tmp/newcfg"
	echo "$1=$2" >> "$POL_USER_ROOT/tmp/newcfg"
	mv "$POL_USER_ROOT/tmp/newcfg" "$POL_USER_ROOT/playonlinux.cfg"
}
POL_Config_Delete ()
{
	# Delete an entry in PlayOnLinux's config file
	# Usage : POL_Config_Delete [KEY]
	
	cat "$POL_USER_ROOT/playonlinux.cfg" 2> /dev/null | grep -v "^$1" > "$POL_USER_ROOT/tmp/newcfg"
	mv "$POL_USER_ROOT/tmp/newcfg" "$POL_USER_ROOT/playonlinux.cfg"
}
POL_Config_Read ()
{
	# Read an entry PlayOnLinux's config file
	# Usage : POL_Config_Read [KEY]
	
	cat "$POL_USER_ROOT/playonlinux.cfg" 2> /dev/null | grep "^$1" | cut -d\= -f2
}

POL_Config_PrefixWrite ()
{
	# Write something to current wine prefix's config file
	# Usage : POL_Config_PrefixWrite [KEY] [VALUE]
	
	cat "$WINEPREFIX/playonlinux.cfg" 2> /dev/null | grep -v "^$1" > "$POL_USER_ROOT/tmp/newcfg"
	echo "$1=$2" >> "$POL_USER_ROOT/tmp/newcfg"
	mv "$POL_USER_ROOT/tmp/newcfg" "$WINEPREFIX/playonlinux.cfg"
}
POL_Config_PrefixDelete ()
{
	# Delete an entry in current wine prefix's config file
	# Usage : POL_Config_PrefixDelete [KEY]
	
	cat "$WINEPREFIX/playonlinux.cfg" 2> /dev/null | grep -v "^$1" > "$POL_USER_ROOT/tmp/newcfg"
	mv "$POL_USER_ROOT/tmp/newcfg" "$WINEPREFIX/playonlinux.cfg"
}
POL_Config_PrefixRead ()
{
	# Read an entry in wine current prefix's config file
	# Usage : POL_Config_PrefixRead [KEY]
	cat "$WINEPREFIX/playonlinux.cfg" 2> /dev/null | grep "^$1" | cut -d\= -f2
}
POL_OpenShell()
{
	# Open a shell in the current prefix environement
	# Usage : POL_OpenShell
	
	cp "$PLAYONLINUX/etc/pol_bash" "$POL_USER_ROOT/tmp/env_bash"
	
if [ "$1" = "" ]
then
		cat << EOF >> "$POL_USER_ROOT/tmp/env_bash"
export WINEPREFIX="$WINEPREFIX"
cd "$WINEPREFIX/drive_c"
echo "You are in $PREFIXNAME virtual drive environment"
EOF
	
else
	cd "$POL_USER_ROOT/shortcuts/"
	cat "$1" | grep PATH >> "$POL_USER_ROOT/tmp/env_bash"
	cat "$1" | grep WINEPREFIX >> "$POL_USER_ROOT/tmp/env_bash"
	cat << EOF >> "$POL_USER_ROOT/tmp/env_bash"
export PLAYONLINUX="$PLAYONLINUX"
cd "$WINEPREFIX/drive_c"
echo "You are in $1's virtual drive environment"
EOF
	fi
	echo bash --rcfile "$POL_USER_ROOT/tmp/env_bash" > "$POL_USER_ROOT/tmp/env_bash2"
	chmod +x "$POL_USER_ROOT/tmp/env_bash2"
	xterm -e "$POL_USER_ROOT/tmp/env_bash2" -T "$APPLICATION_TITLE"
}


##############################
##### Security functions #####
##############################

# Theses functions are here to prevent scriptors from getting root access

sudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
gksudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
gksu ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
su ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
kdesu ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
kdesudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
    echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}

/usr/bin/sudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/gksudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/gksu ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/su ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/kdesu ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/usr/bin/kdesudo ()
{
	POL_Debug_Fatal "The script tried to use sudo"
    echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}
/bin/su ()
{
	POL_Debug_Fatal "The script tried to use sudo"
	echo "$(eval_gettext "This function is disabled in the PlayOnlinux environment.")"
	return 1
}

POL_GPG_install_key()
{
	# This function installs PlayOnLinux GPG public key
	# Usage : POL_GPG_install_key
	
	#create the gnupg directory
	mkdir -p "$GNUPGHOME"
	#import the public key
	if [ "$POL_OS" = "Linux" ]
	then
		gpg --import "$PLAYONLINUX/etc/playonlinux.gpg" > /dev/null 2> /dev/null
	else
		# workaround for Lion
		NEW_DL_PATH="$PLAYONLINUX/../unix/tools/lib/gettext/:$DYLD_LIBRARY_PATH"
		env DYLD_LIBRARY_PATH="$NEW_DL_PATH" gpg --import "$PLAYONLINUX/etc/playonlinux.gpg" > /dev/null 2> /dev/null
	fi
}
POL_GPG_auth_script()
{
	# This function checks if a script has been signed by PlayOnLinux, and if the signature is valid
	# Usage POL_GPG_auth_script [filename]
	# Return TRUE if the script is valid
	# Return FALSE if the script is not valid
	
	POL_GPG_install_key
	FILENAME="$1"
	GPG=`awk '/^-----BEGIN PGP SIGNATURE-----/ {print NR ; exit 0; }' $FILENAME`

	tail -n +${GPG} "$FILENAME" > "$REPERTOIRE/tmp/script.asc" 2> /dev/null
	head -n $(( GPG - 1 )) "$FILENAME"  | grep -v "cat << \"-----END PGP SIGNATURE-----\" > /dev/null" > "$REPERTOIRE/tmp/script" 2> /dev/null

	if [ "$POL_OS" = "Linux" ]
	then
		gpg --verify "$REPERTOIRE/tmp/script.asc" > /dev/null 2> /dev/null
	else
		NEW_DL_PATH="$PLAYONLINUX/../unix/tools/lib/gettext/:$DYLD_LIBRARY_PATH"
		env DYLD_LIBRARY_PATH="$NEW_DL_PATH" gpg --verify "$REPERTOIRE/tmp/script.asc" > /dev/null 2> /dev/null
	fi

	[ "$?" = "0" ] && echo "TRUE" || echo "FALSE"
}
POL_Bash ()
{
	# Equivalent of "bash" command, except that it checks the signature of the script
	# Usage : POL_Bash [script]
	
	OLD_DIR="$PWD"
	if [ "$(POL_GPG_auth_script "$1")" = "TRUE" ]
	then
		cd "$OLD_DIR"
		POL_Debug_Message "POL GPG : Good signature - $TITLE"
		bash "$@"
	else
		cd "$OLD_DIR"
		POL_SetupWindow_Init
		POL_SetupWindow_message "$(eval_gettext 'Warning !!\n\nThe signature of the script you are trying to run is NOT valid\n\nPlayOnLinux has not approved this script and will not be responsible from it.\nPlease ensure you know what you are doing !')" "$TITLE"
		POL_SetupWindow_licence "$(eval_gettext 'Here the source code of the script. Check it carefully')" "$TITLE" "$1"
		POL_SetupWindow_Close
		bash "$@"
	fi

}
POL_Source ()
{
	# Equivalent of "source" command, except that it checks the signature of the script
	# Usage : POL_Source [script]
	
	OLD_DIR="$PWD"
	if [ "$(POL_GPG_auth_script "$1")" = "TRUE" ]
	then
		cd "$OLD_DIR"
		POL_Debug_Message "POL GPG : Good signature"
		source "$@"
	else
		cd "$OLD_DIR"
		POL_SetupWindow_message "$(eval_gettext 'Warning !!\n\nThe signature of the script you are trying to run is NOT valid\n\n$APPLICATION_TITLE has not approved this script and will not be responsible from it.\nPlease ensure you know what you are doing!')" "$TITLE"
		POL_SetupWindow_licence "$(eval_gettext 'Here the source code of the script. Check it carrefully')" "$(eval_gettext 'External library')" "$PWD/$1"
		
		source "$@"
	fi

}

#################################
##### Mac OS .app functions #####
#################################
make_skeleton()
{
	# Make the skeleton of the .app in $DIRAPP
	# Usage: make_skeleton
	mkdir -p "$DIRAPP"
	mkdir -p "$DIRAPP/Contents/MacOS"
	mkdir -p "$DIRAPP/Contents/Resources"
	
	printf "APPL????" > "$DIRAPP/Contents/PkgInfo"
	touch "$DIRAPP/Contents/MacOS/playonmac"
	chmod +x "$DIRAPP/Contents/MacOS/playonmac"
}
make_standalone_script()
{
	# Make the scripts that run the software in standalone package in $DIRAPP
	# Usage : make_standalone_script [Shortcut]
	substitute=$(printf "$2" | sed 's/\//\\\//g' | sed 's/ /\\ /g') # ca aussi j'aime
	substitute2=$(printf "$2" | sed 's/\/\//\//g' | sed 's/\//\\\//g' | sed 's/ /\\ /g') # ca aussi j'aime
	
	cat << EOF3 > "$DIRAPP/Contents/MacOS/playonmac"
#!/bin/bash
apple_message()
{
	cat << EOF > /tmp/message.applescript
tell app "Finder" to display dialog "\$1" buttons "Ok"
EOF
osascript /tmp/message.applescript
}


dir=\$(dirname "\$0")
cd "\$dir"
export SCRIPTDIR="\$PWD"
export OSX_VERSION="\$(uname -r | awk -F '.' '{print \$1}')"

if [ "\$OSX_VERSION" -lt 9 ]
then
	apple_message "Your Mac OS X version is too old to use PlayOnMac"
	exit 0
fi

export PATH="\$SCRIPTDIR/../Resources/wine/bin:\$PATH"
export LD_LIBRARY_PATH="\$SCRIPTDIR/../Resources/wine/lib:\$LD_LIBRARY_PATH"
export WINEPREFIX="\$SCRIPTDIR/../Resources/virtual_drive"
$(cat "$REPERTOIRE/shortcuts/$1" | grep "cd " | sed s/$substitute/'\$SCRIPTDIR\/..\/Resources\/virtual_drive'/)
shift
#$(cat "$REPERTOIRE/shortcuts/$1" | grep "wine " | sed s/$substitute2// | sed s/$substitute//) &
wine "$(basename "$(cat "$REPERTOIRE/shortcuts/$1" | grep "POL_Wine " | cut -d \" -f2)")" \$@ &

EOF3

}
make_pom_script()
{
	# Make the scripts that run the software in PlayOnMac .app package in $DIRAPP
	# Usage : make_pom_script [Shortcut]
	
	cat << EOF2 > "$DIRAPP/Contents/MacOS/playonmac"
#!/bin/bash
apple_message()
{
	cat << EOF > /tmp/message.applescript
tell app "Finder" to display dialog "\$1" buttons "Ok"
EOF
osascript /tmp/message.applescript
}


export PLAYONLINUX="$PLAYONLINUX"
export LANG="$(defaults read -g AppleLocale).UTF-8"
export POL_LANG="$(defaults read -g AppleLocale | cut -d _ -f1)"
export REPERTOIRE="$REPERTOIRE"
export PLAYONMAC="\$PLAYONLINUX"
export POL_USER_ROOT="\$REPERTOIRE"
export NOGETTEXT="TRUE"
export POL_OS="Mac"


source "\$PLAYONLINUX/lib/sources"
dir=\$(dirname "\$0")
cd "\$dir"
export RDISPLAY="\$DISPLAY"
export OSX_VERSION="\$(uname -r | awk -F '.' '{print \$1}')"
[[ "\$OSX_VERSION" -lt 10 ]] && export OSX_TOO_OLD="TRUE"


if [ "\$OSX_VERSION" -lt 9 ]
then
	apple_message "Your Mac OS X version is too old to use PlayOnMac"
	exit 0
fi

if [ ! -e "\$PLAYONLINUX" ]
then
	apple_message "Error ! Unable to find \$PLAYONLINUX"
	exit 0
fi

export PATH="\$PLAYONLINUX/../unix/wine/bin:\$PLAYONLINUX/../unix/image_magick/bin:\$PLAYONLINUX/../unix/tools/bin/:\$PATH"
export LD_LIBRARY_PATH="\$PLAYONLINUX/../unix/wine/lib:\$PLAYONLINUX/../unix/tools/lib/ld:/usr/X11/lib:\$LD_LIBRARY_PATH"

cd "\$REPERTOIRE/shortcuts"
shift
bash "$1" \$@ &
EOF2
}
make_icon()
{
	# Generate the icon for the package in $DIRAPP
	# Usage : make_icon [icon_name]
	rm "/tmp/icon.png"
	cd "/tmp"
	if [ -e "$REPERTOIRE/icones/full_size/$1" ]
	then
		icon_app="$REPERTOIRE/icones/full_size/$1"
		cp "$icon_app" "/tmp/icon2.png"
		convert "/tmp/icon2.png" -resize 128x128\! "/tmp/icon.png"
		png2icns "$DIRAPP/Contents/Resources/playonmac.icns" "/tmp/icon.png" && success=true
	fi
	if [ ! "$success" = "true" ]
	then
		if [ -e "$REPERTOIRE/icones/32/$1" ]
		then
			icon_app="$REPERTOIRE/icones/32/$1"
			cp "$icon_app" "/tmp/icon2.png"
			convert "/tmp/icon2.png" -resize 32x32\! "/tmp/icon.png"
			png2icns "$DIRAPP/Contents/Resources/playonmac.icns" "/tmp/icon.png" && success=true
		fi
	fi
	
	if [ ! "$success" = "true" ] 
	then
		cp "$PLAYONLINUX/etc/playonmac.icns" "$DIRAPP/Contents/Resources/playonmac.icns"	
	fi
	
	if [ ! -e "$DIRAPP/Contents/Resources/playonmac.icns" ]
	then
		cp "$PLAYONLINUX/etc/playonmac.icns" "$DIRAPP/Contents/Resources/playonmac.icns"
	fi
}
make_plist()
{
	# Make the .plist file for the .app in $DIRAPP
	# Usage : make_plist [Long name] [Short name]
	
	cat << EOF > "$DIRAPP/Contents/Info.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleDisplayName</key>
	<string>$1</string>
	<key>CFBundleExecutable</key>
	<string>playonmac</string>
	<key>CFBundleIconFile</key>
	<string>playonmac.icns</string>
	<key>CFBundleIdentifier</key>
	<string>org.playonmac.$2</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>$1</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>1.0</string>
	<key>LSHasLocalizedDisplayName</key>
	<true/>
	<key>NSAppleScriptEnabled</key>
	<false/>
	<key>NSHumanReadableCopyright</key>
	<string>Copyright not specified</string>
	<key>NSMainNibFile</key>
	<string>MainMenu</string>
	<key>NSPrincipalClass</key>
	<string>NSApplication</string>
</dict>
</plist>
EOF
}

#######################################
##### Shortcut creation functions #####
#######################################

CleanLnkDesktop()
{
	# Clean Desktop from PlayOnLinux's wine shortcut
	# Usage: CleanLnkDesktop
	
	mkdir -p "$REPERTOIRE/backup"
	for file in $HOME/Desktop/*.desktop
	do
		if [ ! "$(strings "$file" | grep PlayOn$POL_OS)" = "" ]
		then
			mv "$file" "$REPERTOIRE/backup"
		fi
	done
	for file in $HOME/Desktop/*.lnk
	do
		if [ ! "$(strings "$file" | grep PlayOn$POL_OS)" = "" ]
		then
			mv "$file" "$REPERTOIRE/backup"
		fi
	done
}
POL_SetupWindow_AutoApp()
{
	# Automatically generate a .app for Mac OS X
	# Usage: POL_SetupWindow_AutoApp [Shortcut]
	
	POL_Debug_Message "Making .app $PACKAGE ($shortname)" 
	shortname=`echo "$1" | tr -c [[a-zA-Z0-9]\.] '_'`
	PACKAGE="$1"
	DIRAPP="$HOME/Desktop/$PACKAGE.app"
	POL_SetupWindow_wait_next_signal "$(eval_gettext "Making shortcut...")" "$TITLE"
	make_skeleton "$PACKAGE"
	make_icon "$PACKAGE"
	make_pom_script "$PACKAGE"
	make_plist "$PACKAGE" "$shortname"
	CleanLnkDesktop
}

generer_icone ()
{
	# Generate a shortcut
	# "Equivalent" of POL_SetupWindow_AutoApp for linux
	# Usage: generer_icone [icon image file] [name of the file] [directory] [software to run]
	
	ICONE="$1"
	NOMICONE="$2"
	NOMCOURT="$NOMICONE"
	PLACE="$3"
	EXECUTER="$4"
	
	mkdir -p "$PLACE"
	cd "$PLACE"
	echo "[Desktop Entry]" > "$NOMCOURT.desktop"
	echo "Encoding=UTF-8" >> "$NOMCOURT.desktop"
	echo "Name=$NOMICONE" >> "$NOMCOURT.desktop"
	echo "GenericName=Game" >> "$NOMCOURT.desktop"
	echo "Comment=PlayOnLinux" >> "$NOMCOURT.desktop"
	echo "Type=Application" >> "$NOMCOURT.desktop"
	echo "Exec=$EXECUTER" >> "$NOMCOURT.desktop"
	echo "Icon=$ICONE" >> "$NOMCOURT.desktop"
	echo "Categories=PlayOnLinux;" >> "$NOMCOURT.desktop"
	echo "Name[fr_FR]=$NOMICONE" >> "$NOMCOURT.desktop"
	chmod +x "$NOMCOURT.desktop"
}


detect_wineprefix()
{
	# Read the wineprefix of a shortcut
	# Usage: detect_wineprefix [Shortcut]
	
	file="$REPERTOIRE/shortcuts/$1"
	if [ -e "$file" ]
	then	
		fichier=$(cat "$file" | grep WINEPREFIX)
		fichier=${fichier:18}
		fichier=${fichier//"\""/""}
		fichier=${fichier//"//"/"/"}
	fi
	echo $fichier
}
detect_wineversion()
{
	# Read the wineversion of a shortcut
	# Usage: detect_wineversion [Shortcut]
	
	wineprefixback="$WINEPREFIX"
	export WINEPREFIX="$(detect_wineprefix "$1")"
	POL_Config_PrefixRead "VERSION"
	export WINEPREFIX="$wineprefixback"
}
detect_appdir()
{
	# Read the appdir of a shortcut
	# Usage: detect_appdir [Shortcut]
	
	file="$REPERTOIRE/shortcuts/$1"
	if [ -e "$file" ]
	then	
	fichier=`cat "$file" | grep "cd \""`
	fichier=${fichier:4:${#fichier}-5}
	fi
	echo $fichier
}
detect_appexec()
{
	# Read the program of a shortcut
	# Usage: detect_appexec [Shortcut]
	
	file="$REPERTOIRE/shortcuts/$1"
	if [ -e "$file" ]
	then	
	fichier=`cat "$file" | grep "POL_Wine " | cut -d'"' -f2`
	fi
	echo $fichier
}
clean_wineprefix()
{ 
	# Detect if a prefix is still use or not.
	# It not, ask the user if he/she wants to delete it
	# Usage: clean_wineprefix /path/of/the/prefix
	
	# Ca c'est fait exprÃ¨s ! On touche pas
	[ "$1" = "$REPERTOIRE/.PlayOnLinux/wineprefix/" ] && exit
	[ "$1" = "$REPERTOIRE/Library/PlayOnMac/" ] && exit

	cd "$REPERTOIRE/shortcuts/"
	# Ãa aussi, j'ai pas utilisÃ© $REPERTOIRE volontairment (question de sÃ©cu, si $REPERTOIRE est vide ou mal dÃ©fini, Ã§a peut faire mal)
	[ "$POL_OS" = "Linux" ] && TEST=${1//".PlayOnLinux/wineprefix/"/""}
	[ "$POL_OS" = "Mac" ] && TEST=${1//"Library/PlayOnMac/wineprefix/"/""}
	
	[ "$TEST" = "" ] && exit
	if [ "$TEST" = "$1" ]
	then
		POL_Debug_Error "The directory is not in $APPLICATION_TITLE"
	else
		used=0
		for file in *
		do
			fichier="${file}"
			prefix=$(detect_wineprefix "$fichier")
			if [ "$prefix" = "$1" ]
				then
				used=1
			fi
		done
		if [ "$used" = 1 ] 
			then
			echo "$1 est encore utilisÃ©."
		else
			prefix="$1"
			prefix=$(basename "$1")
			POL_SetupWindow_question "$(eval_gettext "Do you want to delete the virtual drive:")\n\n$prefix" "$TITLE"
			reponse=$APP_ANSWER
			POL_SetupWindow_wait_next_signal "$(eval_gettext 'Uninstalling...')" "$(eval_gettext '$APPLICATION_TITLE Uninstaller')" 
			if [ "$reponse" = "TRUE" ]
			then
				rm -rf "$1"
			fi
		fi
	fi
}


function VersionLower ()
{
	# Return 0 if version1 is lower than version2
	# Usage: VersionLower [version1] [version2]

	local versionA1 versionA2 versionA3 versionB1 versionB2 versionB3
	versionA1=$(cut -d'.' -f1 <<< $1)
	versionA2=$(cut -d'.' -f2 <<< $1)
	versionA3=$(cut -d'.' -f3 <<< $1 | cut -d '-' -f1)
	versionB1=$(cut -d'.' -f1 <<< $2)
	versionB2=$(cut -d'.' -f2 <<< $2)
	versionB3=$(cut -d'.' -f3 <<< $2 | cut -d '-' -f1)
	#rajouter pour les vesions de dev -> la version stable peut sortir
	#les personnes qui utilise la version de dev sont quand mÃªme informÃ© d'une MAJ
	#ex 3.8.1 < 3.8.2-dev < 3.8.2
	if  grep -q '-' <<< $1 ; then
		[ $versionA1 -lt $versionB1 ] && return 0
		[ $versionA1 -le $versionB1 ] && [ $versionA2 -lt $versionB2 ] && return 0
		[ $versionA1 -le $versionB1 ] && [ $versionA2 -le $versionB2 ] && [ $versionA3 -lt $versionB3 ] && return 0
		return 1
	fi
	[ $versionA1 -lt $versionB1 ] && return 0
	[ $versionA1 -le $versionB1 ] && [ $versionA2 -lt $versionB2 ] && return 0
	[ $versionA1 -le $versionB1 ] && [ $versionA2 -le $versionB2 ] && [ $versionA3 -lt $versionB3 ] && return 0
	return 1
	
}
POL_Internal_RunXQuartz()
{
	# Run XQuartz on OSX
	if [ ! "$POL_OS" = "Mac" ]
	then
		echo "This function is not for you"
		return
	fi
	current_appToRun="$(defaults read org.macosforge.xquartz.X11 app_to_run)" # What is the current default app ?
	if [ ! "$?" = "0" ]
	then
		current_appToRun="/opt/X11/bin/xterm"
	fi
	
	defaults write org.macosforge.xquartz.X11 app_to_run "" # Don't run Xterm (or other if user has changed something)
	open "/Applications/Utilities/XQuartz.app"
	defaults write org.macosforge.xquartz.X11 app_to_run "$current_appToRun" # Restaure default behavior
}

POL_Internal_KillAll()
{
	for WId in $(ps aux | grep $APPLICATION_TITLE | grep bash | awk '{print $2}'); 
	do 
		kill $WId; 
		cat << EOF > "$REPERTOIRE/configurations/guis/$WId"
MsgIn
exit
EOF
sleep 1
rm "$REPERTOIRE/configurations/guis/$WId" 2> /dev/null
	done
}

POL_System_FindPart() 
{ 
	if [ -e "$1" ]; then
		df -P "$1"  | awk '/^\/dev/ {print $1}' || echo "$1 not found"; 
	fi
}
POL_System_PartInfo()
{
	awk '$1 == "'$(POL_System_FindPart "$1")'"' /etc/mtab
}

FS_Check ()
{
	if grep -q "$2" <<< "$1" ; then
		$DebugType "$3"
		POL_Debug_LogToPrefix "$3"
		return 1
	fi
}

POL_System_CheckFS()
{
	[ "$POL_OS" = "Mac" ] && return 0
	[ ! -e "$1" ] && return 0 # It's not your job
	if [ "$1" = "--just-warning" ]; then
		DebugType="POL_Debug_Warning"
		shift
	else
		DebugType="POL_Debug_Error"
	fi
	
	POL_Debug_Message "Checking filesystem for $1"
	
	PartInfo="$(POL_System_PartInfo "$1")"
	FilePath="$1"
	FS_Check "$PartInfo" "vfat" "$(eval_gettext 'The following file is located on a FAT32 filesystem.\nIt might prevent wine from working\n\n$FilePath')" || return 1
	FS_Check "$PartInfo" "ntfs" "$(eval_gettext 'The following file is located on a NTFS filesystem.\nIt might prevent wine from working\n\n$FilePath')" || return 1
	FS_Check "$PartInfo" "fuseblk" "$(eval_gettext 'The following file is located on a fuse filesystem.\nIt might prevent wine from working\n\n$FilePath')" || return 1
	FS_Check "$PartInfo" "noexec" "$(eval_gettext 'The following file is located on a noexec mounted filesystem.\nIt might prevent wine from working\n\n$FilePath')" || return 1
	return 0
}